version: 0.2

env: # Create the Environment
  variables:
    ECR_REPO: lks-catalog-image
    ECR_REGION: us-east-1
    CONTAINER_NAME:
  parameter-store:
    AWS_ACCESS_KEY: /course-catalog/production/AWS_ACCESS_KEY
    AWS_SECRET_KEY: /course-catalog/production/AWS_SECRET_KEY
    BUCKET_NAME: /course-catalog/production/AWS_BUCKET_NAME
    AWS_BUCKET_REGION: /course-catalog/production/AWS_BUCKET_NAME
    AWS_CF_KEY_PAIR_ID:
    AWS_CF_PRIVATE_KEY:
    AWS_CF_URL:
    DB_HOST:
    DB_NAME:
    DB_USER:
    DB_PASSWORD:

phases:
  install: # Install runtime
    runtime-versions:
      nodejs: 16
      docker: 20
  pre_build:
    commands: # Run the pre-build script here
      - echo "Install Dependencies and login into ECR"
      - npm install
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build: # Run the unit testing and build image from Dockerfile
    commands:
      - echo "Run unit testing and build docker image"
      - npm run start
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
  post_build: # Pushing image to ECR and create image definition
    commands:
      - echo "push image to ECR..."
      - printf
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo "build complete"

reports: # Report file
    test-report:
      files:
        - 'report/test-result.xml'
      file-format: JUNITXML

artifacts: # Output artifact will generate build
  files:
    - imagedefinitions.json